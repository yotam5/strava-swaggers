/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummaryPrSegmentEffort {
  /// The unique identifier of the activity related to the PR effort.
  #[serde(rename = "pr_activity_id")]
  pr_activity_id: Option<i64>,
  /// The elapsed time ot the PR effort.
  #[serde(rename = "pr_elapsed_time")]
  pr_elapsed_time: Option<i32>,
  /// The time at which the PR effort was started.
  #[serde(rename = "pr_date")]
  pr_date: Option<String>,
  /// Number of efforts by the authenticated athlete on this segment.
  #[serde(rename = "effort_count")]
  effort_count: Option<i32>
}

impl SummaryPrSegmentEffort {
  pub fn new() -> SummaryPrSegmentEffort {
    SummaryPrSegmentEffort {
      pr_activity_id: None,
      pr_elapsed_time: None,
      pr_date: None,
      effort_count: None
    }
  }

  pub fn set_pr_activity_id(&mut self, pr_activity_id: i64) {
    self.pr_activity_id = Some(pr_activity_id);
  }

  pub fn with_pr_activity_id(mut self, pr_activity_id: i64) -> SummaryPrSegmentEffort {
    self.pr_activity_id = Some(pr_activity_id);
    self
  }

  pub fn pr_activity_id(&self) -> Option<&i64> {
    self.pr_activity_id.as_ref()
  }

  pub fn reset_pr_activity_id(&mut self) {
    self.pr_activity_id = None;
  }

  pub fn set_pr_elapsed_time(&mut self, pr_elapsed_time: i32) {
    self.pr_elapsed_time = Some(pr_elapsed_time);
  }

  pub fn with_pr_elapsed_time(mut self, pr_elapsed_time: i32) -> SummaryPrSegmentEffort {
    self.pr_elapsed_time = Some(pr_elapsed_time);
    self
  }

  pub fn pr_elapsed_time(&self) -> Option<&i32> {
    self.pr_elapsed_time.as_ref()
  }

  pub fn reset_pr_elapsed_time(&mut self) {
    self.pr_elapsed_time = None;
  }

  pub fn set_pr_date(&mut self, pr_date: String) {
    self.pr_date = Some(pr_date);
  }

  pub fn with_pr_date(mut self, pr_date: String) -> SummaryPrSegmentEffort {
    self.pr_date = Some(pr_date);
    self
  }

  pub fn pr_date(&self) -> Option<&String> {
    self.pr_date.as_ref()
  }

  pub fn reset_pr_date(&mut self) {
    self.pr_date = None;
  }

  pub fn set_effort_count(&mut self, effort_count: i32) {
    self.effort_count = Some(effort_count);
  }

  pub fn with_effort_count(mut self, effort_count: i32) -> SummaryPrSegmentEffort {
    self.effort_count = Some(effort_count);
    self
  }

  pub fn effort_count(&self) -> Option<&i32> {
    self.effort_count.as_ref()
  }

  pub fn reset_effort_count(&mut self) {
    self.effort_count = None;
  }

}



