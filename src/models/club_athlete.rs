/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClubAthlete {
  /// Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
  #[serde(rename = "resource_state")]
  resource_state: Option<i32>,
  /// The athlete's first name.
  #[serde(rename = "firstname")]
  firstname: Option<String>,
  /// The athlete's last initial.
  #[serde(rename = "lastname")]
  lastname: Option<String>,
  /// The athlete's member status.
  #[serde(rename = "member")]
  member: Option<String>,
  /// Whether the athlete is a club admin.
  #[serde(rename = "admin")]
  admin: Option<bool>,
  /// Whether the athlete is club owner.
  #[serde(rename = "owner")]
  owner: Option<bool>
}

impl ClubAthlete {
  pub fn new() -> ClubAthlete {
    ClubAthlete {
      resource_state: None,
      firstname: None,
      lastname: None,
      member: None,
      admin: None,
      owner: None
    }
  }

  pub fn set_resource_state(&mut self, resource_state: i32) {
    self.resource_state = Some(resource_state);
  }

  pub fn with_resource_state(mut self, resource_state: i32) -> ClubAthlete {
    self.resource_state = Some(resource_state);
    self
  }

  pub fn resource_state(&self) -> Option<&i32> {
    self.resource_state.as_ref()
  }

  pub fn reset_resource_state(&mut self) {
    self.resource_state = None;
  }

  pub fn set_firstname(&mut self, firstname: String) {
    self.firstname = Some(firstname);
  }

  pub fn with_firstname(mut self, firstname: String) -> ClubAthlete {
    self.firstname = Some(firstname);
    self
  }

  pub fn firstname(&self) -> Option<&String> {
    self.firstname.as_ref()
  }

  pub fn reset_firstname(&mut self) {
    self.firstname = None;
  }

  pub fn set_lastname(&mut self, lastname: String) {
    self.lastname = Some(lastname);
  }

  pub fn with_lastname(mut self, lastname: String) -> ClubAthlete {
    self.lastname = Some(lastname);
    self
  }

  pub fn lastname(&self) -> Option<&String> {
    self.lastname.as_ref()
  }

  pub fn reset_lastname(&mut self) {
    self.lastname = None;
  }

  pub fn set_member(&mut self, member: String) {
    self.member = Some(member);
  }

  pub fn with_member(mut self, member: String) -> ClubAthlete {
    self.member = Some(member);
    self
  }

  pub fn member(&self) -> Option<&String> {
    self.member.as_ref()
  }

  pub fn reset_member(&mut self) {
    self.member = None;
  }

  pub fn set_admin(&mut self, admin: bool) {
    self.admin = Some(admin);
  }

  pub fn with_admin(mut self, admin: bool) -> ClubAthlete {
    self.admin = Some(admin);
    self
  }

  pub fn admin(&self) -> Option<&bool> {
    self.admin.as_ref()
  }

  pub fn reset_admin(&mut self) {
    self.admin = None;
  }

  pub fn set_owner(&mut self, owner: bool) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: bool) -> ClubAthlete {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&bool> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

}



