/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ClubActivity {
  #[serde(rename = "athlete")]
  athlete: Option<::models::MetaAthlete>,
  /// The name of the activity
  #[serde(rename = "name")]
  name: Option<String>,
  /// The activity's distance, in meters
  #[serde(rename = "distance")]
  distance: Option<f32>,
  /// The activity's moving time, in seconds
  #[serde(rename = "moving_time")]
  moving_time: Option<i32>,
  /// The activity's elapsed time, in seconds
  #[serde(rename = "elapsed_time")]
  elapsed_time: Option<i32>,
  /// The activity's total elevation gain.
  #[serde(rename = "total_elevation_gain")]
  total_elevation_gain: Option<f32>,
  /// Deprecated. Prefer to use sport_type
  #[serde(rename = "type")]
  _type: Option<::models::ActivityType>,
  #[serde(rename = "sport_type")]
  sport_type: Option<::models::SportType>,
  /// The activity's workout type
  #[serde(rename = "workout_type")]
  workout_type: Option<i32>
}

impl ClubActivity {
  pub fn new() -> ClubActivity {
    ClubActivity {
      athlete: None,
      name: None,
      distance: None,
      moving_time: None,
      elapsed_time: None,
      total_elevation_gain: None,
      _type: None,
      sport_type: None,
      workout_type: None
    }
  }

  pub fn set_athlete(&mut self, athlete: ::models::MetaAthlete) {
    self.athlete = Some(athlete);
  }

  pub fn with_athlete(mut self, athlete: ::models::MetaAthlete) -> ClubActivity {
    self.athlete = Some(athlete);
    self
  }

  pub fn athlete(&self) -> Option<&::models::MetaAthlete> {
    self.athlete.as_ref()
  }

  pub fn reset_athlete(&mut self) {
    self.athlete = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ClubActivity {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_distance(&mut self, distance: f32) {
    self.distance = Some(distance);
  }

  pub fn with_distance(mut self, distance: f32) -> ClubActivity {
    self.distance = Some(distance);
    self
  }

  pub fn distance(&self) -> Option<&f32> {
    self.distance.as_ref()
  }

  pub fn reset_distance(&mut self) {
    self.distance = None;
  }

  pub fn set_moving_time(&mut self, moving_time: i32) {
    self.moving_time = Some(moving_time);
  }

  pub fn with_moving_time(mut self, moving_time: i32) -> ClubActivity {
    self.moving_time = Some(moving_time);
    self
  }

  pub fn moving_time(&self) -> Option<&i32> {
    self.moving_time.as_ref()
  }

  pub fn reset_moving_time(&mut self) {
    self.moving_time = None;
  }

  pub fn set_elapsed_time(&mut self, elapsed_time: i32) {
    self.elapsed_time = Some(elapsed_time);
  }

  pub fn with_elapsed_time(mut self, elapsed_time: i32) -> ClubActivity {
    self.elapsed_time = Some(elapsed_time);
    self
  }

  pub fn elapsed_time(&self) -> Option<&i32> {
    self.elapsed_time.as_ref()
  }

  pub fn reset_elapsed_time(&mut self) {
    self.elapsed_time = None;
  }

  pub fn set_total_elevation_gain(&mut self, total_elevation_gain: f32) {
    self.total_elevation_gain = Some(total_elevation_gain);
  }

  pub fn with_total_elevation_gain(mut self, total_elevation_gain: f32) -> ClubActivity {
    self.total_elevation_gain = Some(total_elevation_gain);
    self
  }

  pub fn total_elevation_gain(&self) -> Option<&f32> {
    self.total_elevation_gain.as_ref()
  }

  pub fn reset_total_elevation_gain(&mut self) {
    self.total_elevation_gain = None;
  }

  pub fn set__type(&mut self, _type: ::models::ActivityType) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ActivityType) -> ClubActivity {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ActivityType> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_sport_type(&mut self, sport_type: ::models::SportType) {
    self.sport_type = Some(sport_type);
  }

  pub fn with_sport_type(mut self, sport_type: ::models::SportType) -> ClubActivity {
    self.sport_type = Some(sport_type);
    self
  }

  pub fn sport_type(&self) -> Option<&::models::SportType> {
    self.sport_type.as_ref()
  }

  pub fn reset_sport_type(&mut self) {
    self.sport_type = None;
  }

  pub fn set_workout_type(&mut self, workout_type: i32) {
    self.workout_type = Some(workout_type);
  }

  pub fn with_workout_type(mut self, workout_type: i32) -> ClubActivity {
    self.workout_type = Some(workout_type);
    self
  }

  pub fn workout_type(&self) -> Option<&i32> {
    self.workout_type.as_ref()
  }

  pub fn reset_workout_type(&mut self) {
    self.workout_type = None;
  }

}



